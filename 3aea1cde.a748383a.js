(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{129:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=a.a.createContext({}),s=function(e){var t=a.a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return a.a.createElement(i.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,i=p(e,["components","mdxType","originalType","parentName"]),u=s(n),d=r,m=u["".concat(c,".").concat(d)]||u[d]||b[d]||o;return n?a.a.createElement(m,l(l({ref:t},i),{},{components:n})):a.a.createElement(m,l({ref:t},i))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,c=new Array(o);c[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,c[1]=l;for(var i=2;i<o;i++)c[i]=n[i];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},181:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/304_save_reload_7_0-20936a177c2c1ca7fc7f711e4ae0c130.png"},85:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return p})),n.d(t,"default",(function(){return s}));var r=n(3),a=n(7),o=(n(0),n(129)),c={title:"304 Save and Reload"},l={unversionedId:"ai/Docker-PyTorch-Tutorial/304_save_reload",id:"ai/Docker-PyTorch-Tutorial/304_save_reload",isDocsHomePage:!1,title:"304 Save and Reload",description:'"""',source:"@site/docs/ai/Docker-PyTorch-Tutorial/304_save_reload.md",slug:"/ai/Docker-PyTorch-Tutorial/304_save_reload",permalink:"/docs/ai/Docker-PyTorch-Tutorial/304_save_reload",version:"current",sidebar:"AI",previous:{title:"303 Build NN Quickly",permalink:"/docs/ai/Docker-PyTorch-Tutorial/303_build_nn_quickly"},next:{title:"305 Batch Train",permalink:"/docs/ai/Docker-PyTorch-Tutorial/305_batch_train"}},p=[{value:"Generate some fake data",id:"generate-some-fake-data",children:[]}],i={toc:p};function s(e){var t=e.components,c=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},i,c,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,'"""\nView more, visit my tutorial page: ',Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://mofanpy.com/tutorials/"}),"https://mofanpy.com/tutorials/"),"\nMy Youtube Channel: ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://www.youtube.com/user/MorvanZhou"}),"https://www.youtube.com/user/MorvanZhou")),Object(o.b)("p",null,"Dependencies:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"torch: 0.1.11"),Object(o.b)("li",{parentName:"ul"},"matplotlib")),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),"import torch\nfrom torch.autograd import Variable\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\ntorch.manual_seed(1)    # reproducible\n")),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),"<torch._C.Generator at 0x7f931012a918>\n")),Object(o.b)("h3",{id:"generate-some-fake-data"},"Generate some fake data"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),"x = torch.unsqueeze(torch.linspace(-1, 1, 100), dim=1)  # x data (tensor), shape=(100, 1)\ny = x.pow(2) + 0.2*torch.rand(x.size())  # noisy y data (tensor), shape=(100, 1)\nx, y = Variable(x, requires_grad=False), Variable(y, requires_grad=False)\n\n")),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),"def save():\n    # save net1\n    net1 = torch.nn.Sequential(\n        torch.nn.Linear(1, 10),\n        torch.nn.ReLU(),\n        torch.nn.Linear(10, 1)\n    )\n    optimizer = torch.optim.SGD(net1.parameters(), lr=0.5)\n    loss_func = torch.nn.MSELoss()\n\n    for t in range(100):\n        prediction = net1(x)\n        loss = loss_func(prediction, y)\n        optimizer.zero_grad()\n        loss.backward()\n        optimizer.step()\n\n    # plot result\n    plt.figure(1, figsize=(10, 3))\n    plt.subplot(131)\n    plt.title('Net1')\n    plt.scatter(x.data.numpy(), y.data.numpy())\n    plt.plot(x.data.numpy(), prediction.data.numpy(), 'r-', lw=5)\n\n    # 2 ways to save the net\n    torch.save(net1, 'net.pkl')  # save entire net\n    torch.save(net1.state_dict(), 'net_params.pkl')   # save only the parameters\n")),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),"def restore_net():\n    # restore entire net1 to net2\n    net2 = torch.load('net.pkl')\n    prediction = net2(x)\n\n    # plot result\n    plt.subplot(132)\n    plt.title('Net2')\n    plt.scatter(x.data.numpy(), y.data.numpy())\n    plt.plot(x.data.numpy(), prediction.data.numpy(), 'r-', lw=5)\n\n")),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),"def restore_params():\n    # restore only the parameters in net1 to net3\n    net3 = torch.nn.Sequential(\n        torch.nn.Linear(1, 10),\n        torch.nn.ReLU(),\n        torch.nn.Linear(10, 1)\n    )\n\n    # copy net1's parameters into net3\n    net3.load_state_dict(torch.load('net_params.pkl'))\n    prediction = net3(x)\n\n    # plot result\n    plt.subplot(133)\n    plt.title('Net3')\n    plt.scatter(x.data.numpy(), y.data.numpy())\n    plt.plot(x.data.numpy(), prediction.data.numpy(), 'r-', lw=5)\n    plt.show()\n")),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),"# save net1\nsave()\n# restore entire net (may slow)\nrestore_net()\n# restore only the net parameters\nrestore_params()\n")),Object(o.b)("p",null,Object(o.b)("img",{alt:"png",src:n(181).default})),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-python"}),"")))}s.isMDXComponent=!0}}]);