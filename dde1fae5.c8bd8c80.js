(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{117:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return c})),a.d(t,"metadata",(function(){return i})),a.d(t,"toc",(function(){return p})),a.d(t,"default",(function(){return b}));var n=a(3),r=a(7),o=(a(0),a(129)),c={},i={unversionedId:"ai/docker-Deep-Learning-with-PyTorch-A-60-Minute-Blitz/2-autograd_tutorial",id:"ai/docker-Deep-Learning-with-PyTorch-A-60-Minute-Blitz/2-autograd_tutorial",isDocsHomePage:!1,title:"2-autograd_tutorial",description:"`python",source:"@site/docs/ai/docker-Deep-Learning-with-PyTorch-A-60-Minute-Blitz/2-autograd_tutorial.md",slug:"/ai/docker-Deep-Learning-with-PyTorch-A-60-Minute-Blitz/2-autograd_tutorial",permalink:"/docs/ai/docker-Deep-Learning-with-PyTorch-A-60-Minute-Blitz/2-autograd_tutorial",version:"current",sidebar:"AI",previous:{title:"1-tensor_tutorial",permalink:"/docs/ai/docker-Deep-Learning-with-PyTorch-A-60-Minute-Blitz/1-tensor_tutorial"},next:{title:"3-neural_networks_tutorial",permalink:"/docs/ai/docker-Deep-Learning-with-PyTorch-A-60-Minute-Blitz/3-neural_networks_tutorial"}},p=[{value:"Tensor",id:"tensor",children:[]},{value:"Gradients",id:"gradients",children:[]}],l={toc:p};function b(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},l,a,{components:t,mdxType:"MDXLayout"}),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"%matplotlib inline\n")),Object(o.b)("h1",{id:"autograd-automatic-differentiation"},"Autograd: Automatic Differentiation"),Object(o.b)("p",null,"Central to all neural networks in PyTorch is the ",Object(o.b)("inlineCode",{parentName:"p"},"autograd")," package.\nLet\u2019s first briefly visit this, and we will then go to training our\nfirst neural network."),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"autograd")," package provides automatic differentiation for all operations\non Tensors. It is a define-by-run framework, which means that your backprop is\ndefined by how your code is run, and that every single iteration can be\ndifferent."),Object(o.b)("p",null,"Let us see this in more simple terms with some examples."),Object(o.b)("h2",{id:"tensor"},"Tensor"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"torch.Tensor")," is the central class of the package. If you set its attribute\n",Object(o.b)("inlineCode",{parentName:"p"},".requires_grad")," as ",Object(o.b)("inlineCode",{parentName:"p"},"True"),", it starts to track all operations on it. When\nyou finish your computation you can call ",Object(o.b)("inlineCode",{parentName:"p"},".backward()")," and have all the\ngradients computed automatically. The gradient for this tensor will be\naccumulated into ",Object(o.b)("inlineCode",{parentName:"p"},".grad")," attribute."),Object(o.b)("p",null,"To stop a tensor from tracking history, you can call ",Object(o.b)("inlineCode",{parentName:"p"},".detach()")," to detach\nit from the computation history, and to prevent future computation from being\ntracked."),Object(o.b)("p",null,"To prevent tracking history (and using memory), you can also wrap the code block\nin ",Object(o.b)("inlineCode",{parentName:"p"},"with torch.no_grad():"),". This can be particularly helpful when evaluating a\nmodel because the model may have trainable parameters with\n",Object(o.b)("inlineCode",{parentName:"p"},"requires_grad=True"),", but for which we don't need the gradients."),Object(o.b)("p",null,"There\u2019s one more class which is very important for autograd\nimplementation - a ",Object(o.b)("inlineCode",{parentName:"p"},"Function"),"."),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"Tensor")," and ",Object(o.b)("inlineCode",{parentName:"p"},"Function")," are interconnected and build up an acyclic\ngraph, that encodes a complete history of computation. Each tensor has\na ",Object(o.b)("inlineCode",{parentName:"p"},".grad_fn")," attribute that references a ",Object(o.b)("inlineCode",{parentName:"p"},"Function")," that has created\nthe ",Object(o.b)("inlineCode",{parentName:"p"},"Tensor")," (except for Tensors created by the user - their\n",Object(o.b)("inlineCode",{parentName:"p"},"grad_fn is None"),")."),Object(o.b)("p",null,"If you want to compute the derivatives, you can call ",Object(o.b)("inlineCode",{parentName:"p"},".backward()")," on\na ",Object(o.b)("inlineCode",{parentName:"p"},"Tensor"),". If ",Object(o.b)("inlineCode",{parentName:"p"},"Tensor")," is a scalar (i.e. it holds a one element\ndata), you don\u2019t need to specify any arguments to ",Object(o.b)("inlineCode",{parentName:"p"},"backward()"),",\nhowever if it has more elements, you need to specify a ",Object(o.b)("inlineCode",{parentName:"p"},"gradient"),"\nargument that is a tensor of matching shape."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"import torch\n")),Object(o.b)("p",null,"Create a tensor and set ",Object(o.b)("inlineCode",{parentName:"p"},"requires_grad=True")," to track computation with it"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"x = torch.ones(2, 2, requires_grad=True)\nprint(x)\n")),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{}),"tensor([[1., 1.],\n        [1., 1.]], requires_grad=True)\n")),Object(o.b)("p",null,"Do a tensor operation:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"y = x + 2\nprint(y)\n")),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{}),"tensor([[3., 3.],\n        [3., 3.]], grad_fn=<AddBackward0>)\n")),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"y")," was created as a result of an operation, so it has a ",Object(o.b)("inlineCode",{parentName:"p"},"grad_fn"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"print(y.grad_fn)\n")),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{}),"<AddBackward0 object at 0x7f84d8707588>\n")),Object(o.b)("p",null,"Do more operations on ",Object(o.b)("inlineCode",{parentName:"p"},"y")),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"z = y * y * 3\nout = z.mean()\n\nprint(z, out)\n")),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{}),"tensor([[27., 27.],\n        [27., 27.]], grad_fn=<MulBackward0>) tensor(27., grad_fn=<MeanBackward0>)\n")),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},".requires_grad_( ... )")," changes an existing Tensor's ",Object(o.b)("inlineCode",{parentName:"p"},"requires_grad"),"\nflag in-place. The input flag defaults to ",Object(o.b)("inlineCode",{parentName:"p"},"False")," if not given."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"a = torch.randn(2, 2)\na = ((a * 3) / (a - 1))\nprint(a.requires_grad)\na.requires_grad_(True)\nprint(a.requires_grad)\nb = (a * a).sum()\nprint(b.grad_fn)\n")),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{}),"False\nTrue\n<SumBackward0 object at 0x7f8466ee2828>\n")),Object(o.b)("h2",{id:"gradients"},"Gradients"),Object(o.b)("p",null,"Let's backprop now.\nBecause ",Object(o.b)("inlineCode",{parentName:"p"},"out")," contains a single scalar, ",Object(o.b)("inlineCode",{parentName:"p"},"out.backward()")," is\nequivalent to ",Object(o.b)("inlineCode",{parentName:"p"},"out.backward(torch.tensor(1.))"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"out.backward()\n")),Object(o.b)("p",null,"Print gradients d(out)/dx"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"print(x.grad)\n")),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{}),"tensor([[4.5000, 4.5000],\n        [4.5000, 4.5000]])\n")),Object(o.b)("p",null,"You should have got a matrix of ",Object(o.b)("inlineCode",{parentName:"p"},"4.5"),". Let\u2019s call the ",Object(o.b)("inlineCode",{parentName:"p"},"out"),"\n",Object(o.b)("em",{parentName:"p"},"Tensor")," \u201c$o$\u201d.\nWe have that $o = \\frac{1}{4}\\sum",Object(o.b)("em",{parentName:"p"},"i z_i$,\n$z_i = 3(x_i+2)^2$ and $z_i\\bigr\\rvert"),"{x",Object(o.b)("em",{parentName:"p"},"i=1} = 27$.\nTherefore,\n$\\frac{\\partial o}{\\partial x_i} = \\frac{3}{2}(x_i+2)$, hence\n$\\frac{\\partial o}{\\partial x_i}\\bigr\\rvert"),"{x_i=1} = \\frac{9}{2} = 4.5$."),Object(o.b)("p",null,"Mathematically, if you have a vector valued function $\\vec{y}=f(\\vec{x})$,\nthen the gradient of $\\vec{y}$ with respect to $\\vec{x}$\nis a Jacobian matrix:"),Object(o.b)("p",null,"\\begin{align}J=\\left(\\begin{array}{ccc}\n\\frac{\\partial y",Object(o.b)("em",{parentName:"p"},"{1}}{\\partial x"),"{1}} & \\cdots & \\frac{\\partial y",Object(o.b)("em",{parentName:"p"},"{1}}{\\partial x"),"{n}}","\\","\n\\vdots & \\ddots & \\vdots","\\","\n\\frac{\\partial y",Object(o.b)("em",{parentName:"p"},"{m}}{\\partial x"),"{1}} & \\cdots & \\frac{\\partial y",Object(o.b)("em",{parentName:"p"},"{m}}{\\partial x"),"{n}}\n\\end{array}\\right)\\end{align}"),Object(o.b)("p",null,"Generally speaking, ",Object(o.b)("inlineCode",{parentName:"p"},"torch.autograd")," is an engine for computing\nvector-Jacobian product. That is, given any vector\n$v=\\left(\\begin{array}{cccc} v",Object(o.b)("em",{parentName:"p"},"{1} & v"),"{2} & \\cdots & v",Object(o.b)("em",{parentName:"p"},"{m}\\end{array}\\right)^{T}$,\ncompute the product $v^{T}\\cdot J$. If $v$ happens to be\nthe gradient of a scalar function $l=g\\left(\\vec{y}\\right)$,\nthat is,\n$v=\\left(\\begin{array}{ccc}\\frac{\\partial l}{\\partial y"),"{1}} & \\cdots & \\frac{\\partial l}{\\partial y_{m}}\\end{array}\\right)^{T}$,\nthen by the chain rule, the vector-Jacobian product would be the\ngradient of $l$ with respect to $\\vec{x}$:"),Object(o.b)("p",null,"\\begin{align}J^{T}\\cdot v=\\left(\\begin{array}{ccc}\n\\frac{\\partial y",Object(o.b)("em",{parentName:"p"},"{1}}{\\partial x"),"{1}} & \\cdots & \\frac{\\partial y",Object(o.b)("em",{parentName:"p"},"{m}}{\\partial x"),"{1}}","\\","\n\\vdots & \\ddots & \\vdots","\\","\n\\frac{\\partial y",Object(o.b)("em",{parentName:"p"},"{1}}{\\partial x"),"{n}} & \\cdots & \\frac{\\partial y",Object(o.b)("em",{parentName:"p"},"{m}}{\\partial x"),"{n}}\n\\end{array}\\right)\\left(\\begin{array}{c}\n\\frac{\\partial l}{\\partial y",Object(o.b)("em",{parentName:"p"},"{1}}","\\","\n\\vdots","\\","\n\\frac{\\partial l}{\\partial y"),"{m}}\n\\end{array}\\right)=\\left(\\begin{array}{c}\n\\frac{\\partial l}{\\partial x",Object(o.b)("em",{parentName:"p"},"{1}}","\\","\n\\vdots","\\","\n\\frac{\\partial l}{\\partial x"),"{n}}\n\\end{array}\\right)\\end{align}"),Object(o.b)("p",null,"(Note that $v^{T}\\cdot J$ gives a row vector which can be\ntreated as a column vector by taking $J^{T}\\cdot v$.)"),Object(o.b)("p",null,"This characteristic of vector-Jacobian product makes it very\nconvenient to feed external gradients into a model that has\nnon-scalar output."),Object(o.b)("p",null,"Now let's take a look at an example of vector-Jacobian product:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"x = torch.randn(3, requires_grad=True)\n\ny = x * 2\nwhile y.data.norm() < 1000:\n    y = y * 2\n\nprint(y)\n")),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{}),"tensor([832.3435, 655.0654, 477.6622], grad_fn=<MulBackward0>)\n")),Object(o.b)("p",null,"Now in this case ",Object(o.b)("inlineCode",{parentName:"p"},"y")," is no longer a scalar. ",Object(o.b)("inlineCode",{parentName:"p"},"torch.autograd"),"\ncould not compute the full Jacobian directly, but if we just\nwant the vector-Jacobian product, simply pass the vector to\n",Object(o.b)("inlineCode",{parentName:"p"},"backward")," as argument:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"v = torch.tensor([0.1, 1.0, 0.0001], dtype=torch.float)\ny.backward(v)\n\nprint(x.grad)\n")),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{}),"tensor([2.0480e+02, 2.0480e+03, 2.0480e-01])\n")),Object(o.b)("p",null,"You can also stop autograd from tracking history on Tensors\nwith ",Object(o.b)("inlineCode",{parentName:"p"},".requires_grad=True")," either by wrapping the code block in\n",Object(o.b)("inlineCode",{parentName:"p"},"with torch.no_grad():")),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"print(x.requires_grad)\nprint((x ** 2).requires_grad)\n\nwith torch.no_grad():\n    print((x ** 2).requires_grad)\n")),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{}),"True\nTrue\nFalse\n")),Object(o.b)("p",null,"Or by using ",Object(o.b)("inlineCode",{parentName:"p"},".detach()")," to get a new Tensor with the same\ncontent but that does not require gradients:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"print(x.requires_grad)\ny = x.detach()\nprint(y.requires_grad)\nprint(x.eq(y).all())\n")),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{}),"True\nFalse\ntensor(True)\n")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Read Later:")),Object(o.b)("p",null,"Document about ",Object(o.b)("inlineCode",{parentName:"p"},"autograd.Function")," is at\n",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://pytorch.org/docs/stable/autograd.html#function"}),"https://pytorch.org/docs/stable/autograd.html#function")))}b.isMDXComponent=!0},129:function(e,t,a){"use strict";a.d(t,"a",(function(){return u})),a.d(t,"b",(function(){return m}));var n=a(0),r=a.n(n);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function c(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?c(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):c(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=r.a.createContext({}),b=function(e){var t=r.a.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=b(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},s=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,c=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),u=b(a),s=n,m=u["".concat(c,".").concat(s)]||u[s]||d[s]||o;return a?r.a.createElement(m,i(i({ref:t},l),{},{components:a})):r.a.createElement(m,i({ref:t},l))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,c=new Array(o);c[0]=s;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:n,c[1]=i;for(var l=2;l<o;l++)c[l]=a[l];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,a)}s.displayName="MDXCreateElement"}}]);